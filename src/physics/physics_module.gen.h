// Generated by meta.cpp

struct D6MotionEnum : reflection::EnumAttribute {
	u32 count(ComponentUID cmp) const override { return 3; }
	const char* name(ComponentUID cmp, u32 idx) const override {
		switch((D6Motion)idx) {
			case D6Motion::LOCKED: return "Locked";
			case D6Motion::LIMITED: return "Limited";
			case D6Motion::FREE: return "Free";
		}
		ASSERT(false);
		return "N/A";
	}
};

struct WheelSlotEnum : reflection::EnumAttribute {
	u32 count(ComponentUID cmp) const override { return 4; }
	const char* name(ComponentUID cmp, u32 idx) const override {
		switch((WheelSlot)idx) {
			case WheelSlot::FRONT_LEFT: return "Front left";
			case WheelSlot::FRONT_RIGHT: return "Front right";
			case WheelSlot::REAR_LEFT: return "Rear left";
			case WheelSlot::REAR_RIGHT: return "Rear right";
		}
		ASSERT(false);
		return "N/A";
	}
};

struct DynamicTypeEnum : reflection::EnumAttribute {
	u32 count(ComponentUID cmp) const override { return 3; }
	const char* name(ComponentUID cmp, u32 idx) const override {
		switch((DynamicType)idx) {
			case DynamicType::STATIC: return "Static";
			case DynamicType::DYNAMIC: return "Dynamic";
			case DynamicType::KINEMATIC: return "Kinematic";
		}
		ASSERT(false);
		return "N/A";
	}
};

reflection::build_module("physics")
	.function<(EntityPtr (PhysicsModule::*)(const Vec3& origin, const Vec3& dir, float distance, EntityPtr ignore_entity))&PhysicsModule::raycast>("raycast")
	.function<(void (PhysicsModule::*)(const Vec3& gravity))&PhysicsModule::setGravity>("setGravity")
	.cmp<&PhysicsModule::createHeightfield, &PhysicsModule::destroyHeightfield>("physical_heightfield", "Physics / Heightfield")
		.prop<&PhysicsModule::getHeightfieldSource, &PhysicsModule::setHeightfieldSource>("Heightmap")
			.resourceAttribute(Texture::TYPE)
		.prop<&PhysicsModule::getHeightfieldXZScale, &PhysicsModule::setHeightfieldXZScale>("XZ scale")
			.minAttribute(0)
		.prop<&PhysicsModule::getHeightfieldYScale, &PhysicsModule::setHeightfieldYScale>("Y scale")
			.minAttribute(0)
		.enum_prop<&PhysicsModule::getHeightfieldLayer, &PhysicsModule::setHeightfieldLayer>("Layer")
			.attribute<LayerEnum>()
	.cmp<&PhysicsModule::createD6Joint, &PhysicsModule::destroyD6Joint>("d6_joint", "Physics / D6 joint")
		.enum_prop<&PhysicsModule::getD6JointXMotion, &PhysicsModule::setD6JointXMotion>("X motion")
			.attribute<D6MotionEnum>()
		.enum_prop<&PhysicsModule::getD6JointYMotion, &PhysicsModule::setD6JointYMotion>("Y motion")
			.attribute<D6MotionEnum>()
		.enum_prop<&PhysicsModule::getD6JointZMotion, &PhysicsModule::setD6JointZMotion>("Z motion")
			.attribute<D6MotionEnum>()
		.enum_prop<&PhysicsModule::getD6JointSwing1Motion, &PhysicsModule::setD6JointSwing1Motion>("Swing 1")
			.attribute<D6MotionEnum>()
		.enum_prop<&PhysicsModule::getD6JointSwing2Motion, &PhysicsModule::setD6JointSwing2Motion>("Swing 2")
			.attribute<D6MotionEnum>()
		.enum_prop<&PhysicsModule::getD6JointTwistMotion, &PhysicsModule::setD6JointTwistMotion>("Twist")
			.attribute<D6MotionEnum>()
		.prop<&PhysicsModule::getD6JointLinearLimit, &PhysicsModule::setD6JointLinearLimit>("Linear limit")
			.minAttribute(0)
		.prop<&PhysicsModule::getD6JointTwistLimit, &PhysicsModule::setD6JointTwistLimit>("Twist limit")
			.radiansAttribute()
		.prop<&PhysicsModule::getD6JointSwingLimit, &PhysicsModule::setD6JointSwingLimit>("Swing limit")
			.radiansAttribute()
		.prop<&PhysicsModule::getD6JointDamping, &PhysicsModule::setD6JointDamping>("Damping")
		.prop<&PhysicsModule::getD6JointStiffness, &PhysicsModule::setD6JointStiffness>("Stiffness")
		.prop<&PhysicsModule::getD6JointRestitution, &PhysicsModule::setD6JointRestitution>("Restitution")
		.prop<&PhysicsModule::getD6JointConnectedBody, &PhysicsModule::setD6JointConnectedBody>("Connected body")
		.prop<&PhysicsModule::getD6JointAxisPosition, &PhysicsModule::setD6JointAxisPosition>("Axis position")
		.prop<&PhysicsModule::getD6JointAxisDirection, &PhysicsModule::setD6JointAxisDirection>("Axis direction")
	.cmp<&PhysicsModule::createDistanceJoint, &PhysicsModule::destroyDistanceJoint>("distance_joint", "Physics / Distance joint")
		.prop<&PhysicsModule::getDistanceJointConnectedBody, &PhysicsModule::setDistanceJointConnectedBody>("Connected body")
		.prop<&PhysicsModule::getDistanceJointAxisPosition, &PhysicsModule::setDistanceJointAxisPosition>("Axis position")
		.prop<&PhysicsModule::getDistanceJointDamping, &PhysicsModule::setDistanceJointDamping>("Damping")
			.minAttribute(0)
		.prop<&PhysicsModule::getDistanceJointStiffness, &PhysicsModule::setDistanceJointStiffness>("Stiffness")
			.minAttribute(0)
		.prop<&PhysicsModule::getDistanceJointTolerance, &PhysicsModule::setDistanceJointTolerance>("Tolerance")
			.minAttribute(0)
		.prop<&PhysicsModule::getDistanceJointLimits, &PhysicsModule::setDistanceJointLimits>("Limits")
		.prop<&PhysicsModule::getDistanceJointLinearForce>("Linear force")
	.cmp<&PhysicsModule::createHingeJoint, &PhysicsModule::destroyHingeJoint>("hinge_joint", "Physics / Hinge joint")
		.prop<&PhysicsModule::getHingeJointConnectedBody, &PhysicsModule::setHingeJointConnectedBody>("Connected body")
		.prop<&PhysicsModule::getHingeJointAxisPosition, &PhysicsModule::setHingeJointAxisPosition>("Axis position")
		.prop<&PhysicsModule::getHingeJointAxisDirection, &PhysicsModule::setHingeJointAxisDirection>("Axis direction")
		.prop<&PhysicsModule::getHingeJointDamping, &PhysicsModule::setHingeJointDamping>("Damping")
			.minAttribute(0)
		.prop<&PhysicsModule::getHingeJointStiffness, &PhysicsModule::setHingeJointStiffness>("Stiffness")
			.minAttribute(0)
		.prop<&PhysicsModule::getHingeJointUseLimit, &PhysicsModule::setHingeJointUseLimit>("Use limit")
		.prop<&PhysicsModule::getHingeJointLimit, &PhysicsModule::setHingeJointLimit>("Limit")
			.radiansAttribute()
	.cmp<&PhysicsModule::createSphericalJoint, &PhysicsModule::destroySphericalJoint>("spherical_joint", "Physics / Spherical joint")
		.prop<&PhysicsModule::getSphericalJointConnectedBody, &PhysicsModule::setSphericalJointConnectedBody>("Connected body")
		.prop<&PhysicsModule::getSphericalJointAxisPosition, &PhysicsModule::setSphericalJointAxisPosition>("Axis position")
		.prop<&PhysicsModule::getSphericalJointAxisDirection, &PhysicsModule::setSphericalJointAxisDirection>("Axis direction")
		.prop<&PhysicsModule::getSphericalJointUseLimit, &PhysicsModule::setSphericalJointUseLimit>("Use limit")
		.prop<&PhysicsModule::getSphericalJointLimit, &PhysicsModule::setSphericalJointLimit>("Limit")
			.radiansAttribute()
	.cmp<&PhysicsModule::createController, &PhysicsModule::destroyController>("physical_controller", "Physics / Controller")
		.function<(float (PhysicsModule::*)(EntityRef entity))&PhysicsModule::getGravitySpeed>("getGravitySpeed")
		.function<(void (PhysicsModule::*)(EntityRef entity, const Vec3& v))&PhysicsModule::moveController>("move")
		.function<(bool (PhysicsModule::*)(EntityRef entity))&PhysicsModule::isControllerCollisionDown>("isCollisionDown")
		.function<(void (PhysicsModule::*)(EntityRef entity, float height))&PhysicsModule::resizeController>("resize")
		.enum_prop<&PhysicsModule::getControllerLayer, &PhysicsModule::setControllerLayer>("Layer")
			.attribute<LayerEnum>()
		.prop<&PhysicsModule::getControllerRadius, &PhysicsModule::setControllerRadius>("Radius")
		.prop<&PhysicsModule::getControllerHeight, &PhysicsModule::setControllerHeight>("Height")
		.prop<&PhysicsModule::getControllerCustomGravity, &PhysicsModule::setControllerCustomGravity>("Use custom gravity")
		.prop<&PhysicsModule::getControllerCustomGravityAcceleration, &PhysicsModule::setControllerCustomGravityAcceleration>("Custom gravity acceleration")
		.prop<&PhysicsModule::getControllerUseRootMotion, &PhysicsModule::setControllerUseRootMotion>("Use root motion")
	.cmp<&PhysicsModule::createActor, &PhysicsModule::destroyActor>("rigid_actor", "Physics / Actor")
		.icon(ICON_FA_VOLLEYBALL_BALL)
		.function<(void (PhysicsModule::*)(EntityRef entity))&PhysicsModule::putToSleep>("putToSleep")
		.function<(void (PhysicsModule::*)(EntityRef entity, const Vec3& force, const Vec3& pos))&PhysicsModule::addForceAtPos>("addForceAtPos")
		.function<(void (PhysicsModule::*)(EntityRef entity, const Vec3& force))&PhysicsModule::applyForceToActor>("applyForce")
		.function<(void (PhysicsModule::*)(EntityRef entity, const Vec3& force))&PhysicsModule::applyImpulseToActor>("applyImpulse")
		.prop<&PhysicsModule::getActorVelocity>("Velocity")
		.prop<&PhysicsModule::getActorSpeed>("Speed")
		.enum_prop<&PhysicsModule::getActorLayer, &PhysicsModule::setActorLayer>("Layer")
			.attribute<LayerEnum>()
		.enum_prop<&PhysicsModule::getActorDynamicType, &PhysicsModule::setActorDynamicType>("Dynamic")
			.attribute<DynamicTypeEnum>()
		.prop<&PhysicsModule::getActorIsTrigger, &PhysicsModule::setActorIsTrigger>("Is trigger")
		.prop<&PhysicsModule::getActorMesh, &PhysicsModule::setActorMesh>("Mesh")
			.resourceAttribute(PhysicsGeometry::TYPE)
		.prop<&PhysicsModule::getActorMaterial, &PhysicsModule::setActorMaterial>("Material")
			.resourceAttribute(PhysicsMaterial::TYPE)
		.prop<&PhysicsModule::getActorCCD, &PhysicsModule::setActorCCD>("CCD")
		.begin_array<&PhysicsModule::getBoxCount, &PhysicsModule::addBox, &PhysicsModule::removeBox>("boxes")
		.prop<&PhysicsModule::getBoxHalfExtents, &PhysicsModule::setBoxHalfExtents>("Half extents")
		.prop<&PhysicsModule::getBoxOffsetPosition, &PhysicsModule::setBoxOffsetPosition>("Position offset")
		.prop<&PhysicsModule::getBoxOffsetRotation, &PhysicsModule::setBoxOffsetRotation>("Rotation offset")
			.radiansAttribute()
		.end_array()
		.begin_array<&PhysicsModule::getSphereCount, &PhysicsModule::addSphere, &PhysicsModule::removeSphere>("spheres")
		.prop<&PhysicsModule::getSphereRadius, &PhysicsModule::setSphereRadius>("Radius")
			.minAttribute(0)
		.prop<&PhysicsModule::getSphereOffsetPosition, &PhysicsModule::setSphereOffsetPosition>("Position offset")
		.end_array()
	.cmp<&PhysicsModule::createWheel, &PhysicsModule::destroyWheel>("wheel", "Physics / Wheel")
		.prop<&PhysicsModule::getWheelSpringStrength, &PhysicsModule::setWheelSpringStrength>("Spring strength")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelSpringMaxCompression, &PhysicsModule::setWheelSpringMaxCompression>("Spring max compression")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelSpringMaxDroop, &PhysicsModule::setWheelSpringMaxDroop>("Spring max droop")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelSpringDamperRate, &PhysicsModule::setWheelSpringDamperRate>("Spring damper rate")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelRadius, &PhysicsModule::setWheelRadius>("Radius")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelWidth, &PhysicsModule::setWheelWidth>("Width")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelMass, &PhysicsModule::setWheelMass>("Mass")
			.minAttribute(0)
		.prop<&PhysicsModule::getWheelMOI, &PhysicsModule::setWheelMOI>("MOI")
			.minAttribute(0)
		.enum_prop<&PhysicsModule::getWheelSlot, &PhysicsModule::setWheelSlot>("Slot")
			.attribute<WheelSlotEnum>()
		.prop<&PhysicsModule::getWheelRPM>("RPM")
	.cmp<&PhysicsModule::createVehicle, &PhysicsModule::destroyVehicle>("vehicle", "Physics / Vehicle")
		.icon(ICON_FA_CAR_ALT)
		.prop<&PhysicsModule::getVehiclePeakTorque, &PhysicsModule::setVehiclePeakTorque>("Peak torque")
		.prop<&PhysicsModule::getVehicleMaxRPM, &PhysicsModule::setVehicleMaxRPM>("Max RPM")
		.prop<&PhysicsModule::getVehicleRPM>("RPM")
		.prop<&PhysicsModule::getVehicleCurrentGear>("Current gear")
		.prop<&PhysicsModule::getVehicleSpeed>("Speed")
		.function<&PhysicsModule::setVehicleAccel>("setAccel")
		.function<&PhysicsModule::setVehicleSteer>("setSteer")
		.function<&PhysicsModule::setVehicleBrake>("setBrake")
		.prop<&PhysicsModule::getVehicleChassis, &PhysicsModule::setVehicleChassis>("Chassis")
			.resourceAttribute(PhysicsGeometry::TYPE)
		.prop<&PhysicsModule::getVehicleMass, &PhysicsModule::setVehicleMass>("Mass")
			.minAttribute(0)
		.prop<&PhysicsModule::getVehicleMOIMultiplier, &PhysicsModule::setVehicleMOIMultiplier>("MOI multiplier")
		.prop<&PhysicsModule::getVehicleCenterOfMass, &PhysicsModule::setVehicleCenterOfMass>("Center of mass")
		.enum_prop<&PhysicsModule::getVehicleWheelsLayer, &PhysicsModule::setVehicleWheelsLayer>("Wheels layer")
			.attribute<LayerEnum>()
		.enum_prop<&PhysicsModule::getVehicleChassisLayer, &PhysicsModule::setVehicleChassisLayer>("Chassis layer")
			.attribute<LayerEnum>()
	.cmp<&PhysicsModule::createInstancedCube, &PhysicsModule::destroyInstancedCube>("physical_instanced_cube", "Physics / Instanced cube")
		.prop<&PhysicsModule::getInstancedCubeHalfExtents, &PhysicsModule::setInstancedCubeHalfExtents>("Half extents")
		.enum_prop<&PhysicsModule::getInstancedCubeLayer, &PhysicsModule::setInstancedCubeLayer>("Layer")
			.attribute<LayerEnum>()
	.cmp<&PhysicsModule::createInstancedMesh, &PhysicsModule::destroyInstancedMesh>("physical_instanced_mesh", "Physics / Instanced mesh")
		.enum_prop<&PhysicsModule::getInstancedMeshLayer, &PhysicsModule::setInstancedMeshLayer>("Layer")
			.attribute<LayerEnum>()
		.prop<&PhysicsModule::getInstancedMeshGeomPath, &PhysicsModule::setInstancedMeshGeomPath>("Mesh")
			.resourceAttribute(PhysicsGeometry::TYPE)
;

