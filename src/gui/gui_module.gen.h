// Generated by meta.cpp

struct TextHAlignEnum : reflection::EnumAttribute {
	u32 count(ComponentUID cmp) const override { return 3; }
	const char* name(ComponentUID cmp, u32 idx) const override {
		switch((TextHAlign)idx) {
			case TextHAlign::LEFT: return "Left";
			case TextHAlign::CENTER: return "Center";
			case TextHAlign::RIGHT: return "Right";
		}
		ASSERT(false);
		return "N/A";
	}
};

struct TextVAlignEnum : reflection::EnumAttribute {
	u32 count(ComponentUID cmp) const override { return 3; }
	const char* name(ComponentUID cmp, u32 idx) const override {
		switch((TextVAlign)idx) {
			case TextVAlign::TOP: return "Top";
			case TextVAlign::MIDDLE: return "Middle";
			case TextVAlign::BOTTOM: return "Bottom";
		}
		ASSERT(false);
		return "N/A";
	}
};

reflection::build_module("gui")
	.event<&GUIModule::buttonClicked>("buttonClicked")
	.event<&GUIModule::rectHovered>("rectHovered")
	.event<&GUIModule::rectHoveredOut>("rectHoveredOut")
	.event<&GUIModule::rectMouseDown>("rectMouseDown")
	.event<&GUIModule::mousedButtonUnhandled>("mousedButtonUnhandled")
	.function<(EntityPtr (GUIModule::*)(const Vec2& pos))&GUIModule::getRectAt>("getRectAt")
	.function<(bool (GUIModule::*)(const Vec2& pos, EntityRef e))&GUIModule::isOver>("isOver")
	.function<(GUISystem* (GUIModule::*)())&GUIModule::getSystemPtr>("getSystem")
	.cmp<&GUIModule::createCanvas, &GUIModule::destroyCanvas>("gui_canvas", "GUI / Canvas")
		.var_prop<&GUIModule::getCanvas, &Canvas::is_3d>("Is 3d")
		.var_prop<&GUIModule::getCanvas, &Canvas::orient_to_camera>("Orient to camera")
		.var_prop<&GUIModule::getCanvas, &Canvas::virtual_size>("Virtual size")
	.cmp<&GUIModule::createRenderTarget, &GUIModule::destroyRenderTarget>("gui_render_target", "GUI / Render target")
	.cmp<&GUIModule::createInputField, &GUIModule::destroyInputField>("gui_input_field", "GUI / Input field")
		.icon(ICON_FA_KEYBOARD)
	.cmp<&GUIModule::createRect, &GUIModule::destroyRect>("gui_rect", "GUI / Rect")
		.prop<&GUIModule::isRectEnabled, &GUIModule::enableRect>("Enabled")
		.prop<&GUIModule::getRectClip, &GUIModule::setRectClip>("Clip content")
		.prop<&GUIModule::getRectLeftPoints, &GUIModule::setRectLeftPoints>("Left points")
		.prop<&GUIModule::getRectLeftRelative, &GUIModule::setRectLeftRelative>("Left relative")
		.prop<&GUIModule::getRectRightPoints, &GUIModule::setRectRightPoints>("Right points")
		.prop<&GUIModule::getRectRightRelative, &GUIModule::setRectRightRelative>("Right relative")
		.prop<&GUIModule::getRectTopPoints, &GUIModule::setRectTopPoints>("Top points")
		.prop<&GUIModule::getRectTopRelative, &GUIModule::setRectTopRelative>("Top relative")
		.prop<&GUIModule::getRectBottomPoints, &GUIModule::setRectBottomPoints>("Bottom points")
		.prop<&GUIModule::getRectBottomRelative, &GUIModule::setRectBottomRelative>("Bottom relative")
	.cmp<&GUIModule::createButton, &GUIModule::destroyButton>("gui_button", "GUI / Button")
		.prop<&GUIModule::getButtonHoveredColorRGBA, &GUIModule::setButtonHoveredColorRGBA>("Hovered color")
			.colorAttribute()
		.prop<&GUIModule::getButtonHoveredCursor, &GUIModule::setButtonHoveredCursor>("Hovered cursor")
			.attribute<CursorTypeEnum>()
	.cmp<&GUIModule::createImage, &GUIModule::destroyImage>("gui_image", "GUI / Image")
		.icon(ICON_FA_IMAGE)
		.prop<&GUIModule::isImageEnabled, &GUIModule::enableImage>("Enabled")
		.prop<&GUIModule::getImageColorRGBA, &GUIModule::setImageColorRGBA>("Color")
			.colorAttribute()
		.prop<&GUIModule::getImageSprite, &GUIModule::setImageSprite>("Sprite")
			.resourceAttribute(Sprite::TYPE)
	.cmp<&GUIModule::createText, &GUIModule::destroyText>("gui_text", "GUI / Text")
		.icon(ICON_FA_FONT)
		.prop<&GUIModule::getTextFontSize, &GUIModule::setTextFontSize>("Font size")
			.minAttribute(0)
		.prop<&GUIModule::getTextColorRGBA, &GUIModule::setTextColorRGBA>("Color")
			.colorAttribute()
		.prop<&GUIModule::getTextFontPath, &GUIModule::setTextFontPath>("Font")
			.resourceAttribute(FontResource::TYPE)
		.prop<&GUIModule::getTextHAlign, &GUIModule::setTextHAlign>("Horizontal align")
			.attribute<TextHAlignEnum>()
		.prop<&GUIModule::getTextVAlign, &GUIModule::setTextVAlign>("Vertical align")
			.attribute<TextVAlignEnum>()
		.prop<&GUIModule::getText, &GUIModule::setText>("Text")
			.multilineAttribute()
;

